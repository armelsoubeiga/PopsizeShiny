sum(q)
##Biais moyen
sum(v$residual)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
N=1000
n=5
p=1/2
statDes1 <- matrix(rep(NA ,2*N),ncol =2)
colnames(statDes1) <- c("s2","Tobs")
set.seed(10000)
for (i in 1:N){
echant <- matrix(rbinom(N,n,p),nrow=N)
statDes1[i,"s2"] <- mean(echant)
statDes1[i,"Tobs"] <-sd(echant)
}
statDes1<-cbind(echant,statDes1)
colnames(statDes1)[colnames(statDes1)==""]<-"simulation"
View(statDes1)
View(statDes1)
?rbinom
N=1000
n=5
p=1/2
statDes1 <- matrix(rep(NA ,3*N),ncol =3)
colnames(statDes1) <- c("simulation","s2","Tobs")
statDes1[,"simulation"]<- matrix(rbinom(N,n,p),nrow=N)
set.seed(10000)
for (i in 1:N){
statDes1[i,"s2"] <- statDes1[i,"simulation"]/5
statDes1[i,"Tobs"] <-sd(echant)
}
N=1000
n=5
p=1/2
statDes1 <- matrix(rep(NA ,3*N),ncol =3)
colnames(statDes1) <- c("simulation","s2","Tobs")
statDes1[,"simulation"]<- matrix(rbinom(N,n,p),nrow=N)
set.seed(10000)
for (i in 1:N){
statDes1[i,"s2"] <- statDes1[i,"simulation"]/5
statDes1[i,"Tobs"] <-sd(echant)
}
View(statDes1)
View(statDes1)
N=1000
n=5
p=1/2
statDes1 <- matrix(rep(NA ,3*N),ncol =3)
colnames(statDes1) <- c("simulation","Fn","Tobs")
set.seed(10000)
statDes1[,"simulation"]<- matrix(rbinom(N,n,p),nrow=N)
for (i in 1:N){
statDes1[i,"Fn"] <- statDes1[i,"simulation"]/5
statDes1[i,"Tobs"] <-sd(echant)
}
N=1000
n=5
p=1/2
statDes1 <- matrix(rep(NA ,3*N),ncol =3)
colnames(statDes1) <- c("simulation","Fn","Tobs")
set.seed(10000)
statDes1[,"simulation"]<- matrix(rbinom(N,n,p),nrow=N)
for (i in 1:N){
statDes1[i,"Fn"] <- statDes1[i,"simulation"]/5
statDes1[i,"Tobs"] <-sd(2)
}
N=1000
n=5
p=1/2
statDes1 <- matrix(rep(NA ,3*N),ncol =3)
colnames(statDes1) <- c("simulation","Fn","Tobs")
set.seed(10000)
statDes1[,"simulation"]<- matrix(rbinom(N,n,p),nrow=N)
for (i in 1:N){
statDes1[i,"Fn"] <- statDes1[i,"simulation"]/5
statDes1[i,"Tobs"] <-sqrt(5)*((statDes1[i,"Fn"]-0.5)/sqrt(0.5*0.5))
}
View(statDes1)
f <- 22/40
#T obsevre
Tobs <- sqrt(n)*((f-0.5)/sqrt(0.5*(1-0.5)))
Tobs
N=1000
n=5
p=1/2
statDes1 <- matrix(rep(NA ,4*N),ncol =4)
colnames(statDes1) <- c("simulation","Fn","Tobs","P-value")
set.seed(10000)
statDes1[,"simulation"]<- matrix(rbinom(N,n,p),nrow=N)
for (i in 1:N){
statDes1[i,"Fn"] <- statDes1[i,"simulation"]/5
statDes1[i,"Tobs"] <-sqrt(5)*((statDes1[i,"Fn"]-0.5)/sqrt(0.5*0.5))
statDes1[i,"Tobs"] <- 1-pnorm(statDes1[i,"Tobs"])
}
View(statDes1)
N=1000
n=5
p=1/2
statDes1 <- matrix(rep(NA ,4*N),ncol =4)
colnames(statDes1) <- c("simulation","Fn","Tobs","P-value")
set.seed(10000)
statDes1[,"simulation"]<- matrix(rbinom(N,n,p),nrow=N)
for (i in 1:N){
statDes1[i,"Fn"] <- statDes1[i,"simulation"]/5
statDes1[i,"Tobs"] <-sqrt(5)*((statDes1[i,"Fn"]-0.5)/sqrt(0.5*0.5))
statDes1[i,"P-value"] <- 1-pnorm(statDes1[i,"Tobs"])
}
View(statDes1)
N=1000
n=5
p=1/2
statDes1 <- matrix(rep(NA ,4*N),ncol =4)
colnames(statDes1) <- c("simulation","Fn","Tobs","P-value")
set.seed(10000)
statDes1[,"simulation"]<- matrix(rbinom(N,n,p),nrow=N)
for (i in 1:N){
statDes1[i,"Fn"] <- statDes1[i,"simulation"]/5
statDes1[i,"Tobs"] <-sqrt(5)*((statDes1[i,"Fn"]-0.5)/sqrt(0.5*0.5))
statDes1[i,"P-value"] <- 1-pnorm(statDes1[i,"Tobs"])
statDes[i,"P.value"] <- prop.test(statDes1[i,"Fn"],n,p=0.5,alternative="greater",correct = F)$p.value
}
test <- prop.test(22,n,p=0.5,alternative="greater",correct = F)
test
n <-  40
test <- prop.test(22,n,p=0.5,alternative="greater",correct = F)
test
N=1000
n=5
p=1/2
statDes1 <- matrix(rep(NA ,4*N),ncol =4)
colnames(statDes1) <- c("simulation","Fn","Tobs","P-value")
set.seed(10000)
statDes1[,"simulation"]<- matrix(rbinom(N,n,p),nrow=N)
for (i in 1:N){
statDes1[i,"Fn"] <- statDes1[i,"simulation"]/5
statDes1[i,"Tobs"] <-sqrt(5)*((statDes1[i,"Fn"]-0.5)/sqrt(0.5*0.5))
statDes1[i,"P-value"] <- 1-pnorm(statDes1[i,"Tobs"])
statDes[i,"P.value"] <- prop.test(statDes1[i,"Fn"],n,p=0.5,alternative="greater",correct = F)$p-value
}
N=1000
n=5
p=1/2
statDes1 <- matrix(rep(NA ,5*N),ncol =5)
colnames(statDes1) <- c("simulation","Fn","Tobs","P-value")
set.seed(10000)
statDes1[,"simulation"]<- matrix(rbinom(N,n,p),nrow=N)
for (i in 1:N){
statDes1[i,"Fn"] <- statDes1[i,"simulation"]/5
statDes1[i,"Tobs"] <-sqrt(5)*((statDes1[i,"Fn"]-0.5)/sqrt(0.5*0.5))
statDes1[i,"P-value"] <- 1-pnorm(statDes1[i,"Tobs"])
statDes[i,"P.value"] <- prop.test(statDes1[i,"Fn"],n,p=0.5,alternative="greater",correct = F)$p-value
}
N=1000
n=5
p=1/2
statDes1 <- matrix(rep(NA ,5*N),ncol =5)
colnames(statDes1) <- c("simulation","Fn","Tobs","P-value")
set.seed(10000)
statDes1[,"simulation"]<- matrix(rbinom(N,n,p),nrow=N)
for (i in 1:N){
statDes1[i,"Fn"] <- statDes1[i,"simulation"]/5
statDes1[i,"Tobs"] <-sqrt(5)*((statDes1[i,"Fn"]-0.5)/sqrt(0.5*0.5))
statDes1[i,"P-value"] <- 1-pnorm(statDes1[i,"Tobs"])
statDes[i,"P.value"] <- prop.test(statDes1[i,"Fn"],n,p=0.5,alternative="greater",correct = F)$p-value
}
N=1000
n=5
p=1/2
statDes1 <- matrix(rep(NA ,5*N),ncol =5)
colnames(statDes1) <- c("simulation","Fn","Tobs","P-value","P.value")
set.seed(10000)
statDes1[,"simulation"]<- matrix(rbinom(N,n,p),nrow=N)
for (i in 1:N){
statDes1[i,"Fn"] <- statDes1[i,"simulation"]/5
statDes1[i,"Tobs"] <-sqrt(5)*((statDes1[i,"Fn"]-0.5)/sqrt(0.5*0.5))
statDes1[i,"P-value"] <- 1-pnorm(statDes1[i,"Tobs"])
statDes[i,"P.value"] <- prop.test(statDes1[i,"Fn"],n,p=0.5,alternative="greater",correct = F)$p-value
}
test <- prop.test(22,n,p=0.5,alternative="greater",correct = F)
test
test$p-value
N=1000
n=5
p=1/2
statDes1 <- matrix(rep(NA ,5*N),ncol =5)
colnames(statDes1) <- c("simulation","Fn","Tobs","P-value","P.value")
set.seed(10000)
statDes1[,"simulation"]<- matrix(rbinom(N,n,p),nrow=N)
for (i in 1:N){
statDes1[i,"Fn"] <- statDes1[i,"simulation"]/5
statDes1[i,"Tobs"] <-sqrt(5)*((statDes1[i,"Fn"]-0.5)/sqrt(0.5*0.5))
statDes1[i,"P-value"] <- 1-pnorm(statDes1[i,"Tobs"])
statDes[i,"P.value"] <- prop.test(statDes1[i,"Fn"],n,p=0.5, alternative="greater",correct = F)$p.value
}
N=1000
n=5
p=1/2
statDes1 <- matrix(rep(NA ,5*N),ncol =5)
colnames(statDes1) <- c("simulation","Fn","Tobs","P-value","P.value")
set.seed(10000)
statDes1[,"simulation"]<- matrix(rbinom(N,n,p),nrow=N)
for (i in 1:N){
statDes1[i,"Fn"] <- statDes1[i,"simulation"]/5
statDes1[i,"Tobs"] <-sqrt(5)*((statDes1[i,"Fn"]-0.5)/sqrt(0.5*0.5))
statDes1[i,"P-value"] <- 1-pnorm(statDes1[i,"Tobs"])
statDes1[i,"P.value"] <- prop.test(statDes1[i,"Fn"],n,p=0.5, alternative="greater",correct = F)$p.value
}
View(statDes1)
N=1000
n=5
p=1/2
statDes1 <- matrix(rep(NA ,5*N),ncol =5)
colnames(statDes1) <- c("simulation","Fn","Tobs","P-value","P.value")
set.seed(10000)
statDes1[,"simulation"]<- matrix(rbinom(N,n,p),nrow=N)
for (i in 1:N){
statDes1[i,"Fn"] <- statDes1[i,"simulation"]/5
statDes1[i,"Tobs"] <-sqrt(5)*((statDes1[i,"Fn"]-0.5)/sqrt(0.5*0.5))
statDes1[i,"P-value"] <- 1-pnorm(statDes1[i,"Tobs"])
statDes1[i,"P.value"] <- prop.test(statDes1[i,"Fn"],n,p=0.5, alternative="greater",correct = F)$p-value
}
statDes2 <- matrix(rep(NA ,N),ncol =1)
statDes2 <-apply(statDes1,1,prop.test(statDes1[i,"Fn"],n,p=0.5, alternative="greater",correct = F)$p.value)
statDes2 <- matrix(rep(NA ,N),ncol =1)
statDes2 <-apply(statDes1,1,prop.test(statDes1[,"Fn"],n,p=0.5, alternative="greater",correct = F)$p.value)
statDes2 <- matrix(rep(NA ,N),ncol =1)
statDes2 <-apply(statDes1,1,prop.test(statDes1[,"Fn"],5,p=0.5, alternative="greater",correct = F)$p.value)
length(statDes1[,"Fn"])
length(statDes2)
?prop.test
statDes2 <- matrix(rep(NA ,N),ncol =1)
statDes2 <-apply(statDes1,1,prop.test(statDes1[,"simulation"],5,p=0.5, alternative="greater",correct = F)$p.value)
N=1000
n=5
p=1/2
statDes1 <- matrix(rep(NA ,5*N),ncol =5)
colnames(statDes1) <- c("simulation","Fn","Tobs","P-value","P.value")
set.seed(10000)
statDes1[,"simulation"]<- matrix(rbinom(N,n,p),nrow=N)
for (i in 1:N){
statDes1[i,"Fn"] <- statDes1[i,"simulation"]/5
statDes1[i,"Tobs"] <-sqrt(5)*((statDes1[i,"Fn"]-0.5)/sqrt(0.5*0.5))
statDes1[i,"P-value"] <- 1-pnorm(statDes1[i,"Tobs"])
statDes1[i,"P.value"] <- prop.test(statDes1[i,"simulation"],n,p=0.5, alternative="greater",correct = F)$p.value
}
n <- 20
M <- 500
moy <- 4
sigma <- 1.2
alpha <- 0.05
#
statDes <- matrix(rep(NA ,5*M),ncol =5)
colnames(statDes) <- c("moy","s2","Tobs","P-value","P.value")
set.seed(10000)
for (i in 1:M){
echant <- matrix(rnorm(n*M,moy,sigma),nrow=M)
statDes [i,"moy"] <- mean(echant)
statDes [i,"s2"] <- sd(echant)
statDes[i,"Tobs"] <- sqrt(n)*((mean(echant)-4)/sd(echant))
statDes[i,"P-value"] <- 2*(1-pt(abs(statDes[i,"Tobs"]),19))
statDes[i,"P.value"] <- t.test(echant,mu=4,alternative="two.sided")$p.value
}
statDes <- cbind(echant,statDes)
rejetH1<- rep(NA, M)
for (i in 1:M) {
rejetH1[i]<- as.numeric(statDes[i,25]< 0.05)
if (rejetH1[i]=1) rejetH1[i] <- "Rejet H1"
else rejetH1[i] <- "Rejet H0"
}
rejetH1<- rep(NA, M)
for (i in 1:M) {
rejetH1[i]<- as.numeric(statDes[i,25]< 0.05)
if (rejetH1[i]==1) rejetH1[i] <- "Rejet H1"
else rejetH1[i] <- "Rejet H0"
}
View(rejetH1)
rejetH1<- rep(NA, M)
Decision=rejetH1
for (i in 1:M) {
rejetH1[i] <- Decision[i]<- as.numeric(statDes[i,25]< 0.05)
if (Decision[i]==1) Decision[i] <- "Rejet H1"
else Decision[i] <- "Rejet H0"
}
rejetH1<- rep(NA, N)
for (i in 1:N) {
rejetH1[i]<- (statDes[i,"P-value"]> 0.05)
}
sum(rejetH1)
N=1000
n=5
p=1/2
statDes1 <- matrix(rep(NA ,5*N),ncol =5)
colnames(statDes1) <- c("simulation","Fn","Tobs","P-value","P.value")
set.seed(10000)
statDes1[,"simulation"]<- matrix(rbinom(N,n,p),nrow=N)
for (i in 1:N){
statDes1[i,"Fn"] <- statDes1[i,"simulation"]/5
statDes1[i,"Tobs"] <-sqrt(5)*((statDes1[i,"Fn"]-0.5)/sqrt(0.5*0.5))
statDes1[i,"P-value"] <- 1-pnorm(statDes1[i,"Tobs"])
statDes1[i,"P.value"] <- prop.test(statDes1[i,"simulation"],n,p=0.5, alternative="greater",correct = F)$p.value
}
rejetH1<- rep(NA, N)
for (i in 1:N) {
rejetH1[i]<- (statDes1[i,"P-value"]> 0.05)
}
sum(rejetH1)
1000-971
shiny::runApp()
shiny::runApp('C:/Users/Armel soubeiga/Desktop/Mes COURS/SSD_UGA/M1/R/test shiny/test 2/tes2')
shiny::runApp('C:/Users/Armel soubeiga/Desktop/Mes COURS/SSD_UGA/M1/R/test shiny/test 2/tes2')
install.packages("showModal")
install.packages("showModal")
message = "Hello, world!", icon = "info", type = "ok")
msgBox <- tkmessageBox(title = "Title of message box",message = "Hello, world!", icon = "info", type = "ok")
library("tcltk")
require(tcltk)
msgBox <- tkmessageBox(title = "Title of message box",message = "Hello, world!", icon = "info", type = "ok")
shiny::runApp()
shiny::runApp()
class(msgBox)
shiny::runApp()
install.packages("showModal")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
?tkmessageBox
tt <- tktoplevel()
tkpack(l1 <- tklabel(tt, text = "Heave"), l2< - tklabel(tt, text = "Ho"))
tkpack(l1 <- tklabel(tt, text = "Heave")
tkpack.configure(l1, side = "left")
xyzzy <- tclVar(7913)
tclvalue(xyzzy)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp('C:/Users/Armel soubeiga/Desktop/Mes COURS/SSD_UGA/M1/R/Shinypopsize')
shiny::runApp()
vacc1a <- function(age, female, ily) {
p <- 0.25 + 0.3 * 1 / (1 - exp(0.04 * age)) + 0.1 * ily
p <- p * if (female) 1.25 else 0.75
p <- max(0, p)
p <- min(1, p)
p
}
Base<-read.table("C:\\Users\\Armel soubeiga\\Desktop\\Donnes\\Basef.csv",sep=";",header=TRUE)
attach(Base)
Base<-read.table("C:\\Users\\Armel soubeiga\\Desktop\\Donnes\\Basef.csv",sep=";",header=TRUE)
attach(Base)
phi=.7
ts=arC(10,500,phi,2)
plot(Base$pop,type="l",
main=paste("Plot of AR(1) Rcpp realization with parameter",phi))
abline(h=0,col="blue",lty=2)
grid()
install.packages(arC)
install.packages("arC")
phi=.7
#ts=arC(10,500,phi,2)
plot(Base$pop,type="l",
main=paste("Plot of AR(1) Rcpp realization with parameter",phi))
abline(h=0,col="blue",lty=2)
grid()
phi=.7
#ts=arC(10,500,phi,2)
plot(Base$pop,type="p",
main=paste("Plot of AR(1) Rcpp realization with parameter",phi))
abline(h=0,col="blue",lty=2)
grid()
phi=.7
#ts=arC(10,500,phi,2)
plot(Base$pop,type="p",
main=paste("Plot of AR(1) Rcpp realization with parameter",phi))
abline(h=0,col="blue",lty=2)
phi=.7
#ts=arC(10,500,phi,2)
plot(Base$pop,type="p",
main=paste("Plot of AR(1) Rcpp realization with parameter",phi))
abline(h=0,col="blue",lty=2)
grid()
shiny::runApp()
class(Base$pop)
class(c(Base$pop)
)
cppFunction('double sigma(NumericVector x) {
double sigma = sd(x);
return sigma;
}')
RcppFunction('double sigma(NumericVector x) {
double sigma = sd(x);
return sigma;
}')
library('Rcpp')
require(Rcpp)
cppFunction('double sigma(NumericVector x) {
double sigma = sd(x);
return sigma;
}')
sigma(Base$pop)
using namespace Rcpp;
// [[Rcpp::export]]
double meanpop(NumericVector x) {
int n = x.size();
double total = 0;
for(int i = 0; i < n; ++i) {
total += x[i];
}
return total / n;
}
using namespace Rcpp;
double meanpop(NumericVector x) {
int n = x.size();
double total = 0;
for(int i = 0; i < n; ++i) {
total += x[i];
}
return total / n;
}
include <Rcpp.h>
using namespace Rcpp;
[[Rcpp::export]]
double meanpop(NumericVector x) {
int n = x.size();
double total = 0;
for(int i = 0; i < n; ++i) {
total += x[i];
}
return total / n;
}
sourceCpp("path/to/file.cpp")
cppFunction('double meanpop(NumericVector x) {
int n = x.size();
double total = 0;
for(int i = 0; i < n; ++i) {
total += x[i];
}
return total / n;
}')
meanpop(Base$pop)
men(Base$pop)
mean(Base$pop)
ks.test(Base$pop,"pnorm",meanpop(Base$pop),sigmapop(Base$pop))
cppFunction('double sigmapop(NumericVector x) {
double sigma = sd(x);
return sigma;
}')
ks.test(Base$pop,"pnorm",meanpop(Base$pop),sigmapop(Base$pop))
mm <- meanpop(Base$pop)
sd <- sigmapop(Base$pop)
ks.test(Base$pop,"pnorm",mm,sd)
ks.test(pop,"pnorm",mm,sd)
mn <- mean(pop)
sd <- sd(pop)
ks.test(pop,"pnorm",mn,sd)
?ks.test
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
data<-read.csv("Intima_Media.csv",sep=";",header=TRUE, dec=".")
library("foreign")
data<-read.dta("C:\\Users\\Armel soubeiga\\Desktop\\Analyses\\Base\\Base0.dta",convert.factors = FALSE)
shiny::runApp()
shiny::runApp()
Base<-read.table("C:\\Users\\Armel soubeiga\\Desktop\\Mes COURS\\SSD_UGA\\M1\\R\\ProjetR_Armel\\Shinypopsize\\data\\Basef.csv",sep=";",header=TRUE)
View(Base)
shiny::runApp()
?tapply
require(stats)
groups <- as.factor(rbinom(32, n = 5, prob = 0.4))
tapply(groups, groups, length) #- is almost the same as
require(stats)
groups <- as.factor(rbinom(32, n = 5, prob = 0.4))
tapply(groups, groups, length) #- is almost the same as
a=tapply(groups, groups, length) #- is almost the same as
class(a)
a=table(groups)
a
class(a)
a=table(a)
class(a)
a=tapply(groups, groups, length) #- is almost the same as
as.matrix(a)
a=tapply(groups, groups, length) #- is almost the same as
as.data.frame(a)
a=tapply(groups, groups, length,simplify = TRUE) #- is almost the same as
a
class(a)
shiny::runApp()
shiny::runApp()
shiny::runApp()
library("")
library("popsize")
